// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.0
// source: mes/message.proto

// 定义包名

package mes

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	name "grpcTest/name"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义 Req 消息结构
type Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 类型 字段 = 标识号
	Name string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NN   *name.Res `protobuf:"bytes,2,opt,name=NN,proto3" json:"NN,omitempty"`
}

func (x *Req) Reset() {
	*x = Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mes_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_mes_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_mes_message_proto_rawDescGZIP(), []int{0}
}

func (x *Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Req) GetNN() *name.Res {
	if x != nil {
		return x.NN
	}
	return nil
}

// 定义 Res 消息结构
type Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Img  []*Req `protobuf:"bytes,2,rep,name=img,proto3" json:"img,omitempty"`
}

func (x *Res) Reset() {
	*x = Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mes_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res) ProtoMessage() {}

func (x *Res) ProtoReflect() protoreflect.Message {
	mi := &file_mes_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res.ProtoReflect.Descriptor instead.
func (*Res) Descriptor() ([]byte, []int) {
	return file_mes_message_proto_rawDescGZIP(), []int{1}
}

func (x *Res) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Res) GetImg() []*Req {
	if x != nil {
		return x.Img
	}
	return nil
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  int32 `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude int32 `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mes_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_mes_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_mes_message_proto_rawDescGZIP(), []int{2}
}

func (x *Point) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Point) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  int32 `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude int32 `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mes_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_mes_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_mes_message_proto_rawDescGZIP(), []int{3}
}

func (x *Range) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Range) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type Between struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  int32 `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude int32 `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Between) Reset() {
	*x = Between{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mes_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Between) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Between) ProtoMessage() {}

func (x *Between) ProtoReflect() protoreflect.Message {
	mi := &file_mes_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Between.ProtoReflect.Descriptor instead.
func (*Between) Descriptor() ([]byte, []int) {
	return file_mes_message_proto_rawDescGZIP(), []int{4}
}

func (x *Between) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Between) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

var File_mes_message_proto protoreflect.FileDescriptor

var file_mes_message_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x65, 0x73, 0x1a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x03, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x02, 0x4e, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x52, 0x02, 0x4e, 0x4e,
	0x22, 0x35, 0x0a, 0x03, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x03, 0x69,
	0x6d, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6d, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x22, 0x41, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x41, 0x0a, 0x05, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x43, 0x0a,
	0x07, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x32, 0xed, 0x01, 0x0a, 0x06, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a,
	0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x08, 0x2e, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x1a,
	0x08, 0x2e, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x65,
	0x63, 0x68, 0x6f, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x21, 0x0a,
	0x09, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x12, 0x08, 0x2e, 0x6d, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x1a, 0x08, 0x2e, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x26, 0x0a, 0x0a, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0a,
	0x2e, 0x6d, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x08, 0x2e, 0x6d, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x28, 0x01, 0x12, 0x26, 0x0a, 0x0a, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x08, 0x2e, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x1a, 0x0a, 0x2e, 0x6d, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x30, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x12, 0x0c, 0x2e, 0x6d, 0x65, 0x73, 0x2e, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x1a, 0x0c,
	0x2e, 0x6d, 0x65, 0x73, 0x2e, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x12, 0x5a, 0x10, 0x67, 0x72, 0x70, 0x63, 0x54, 0x65, 0x73, 0x74, 0x2f, 0x6d,
	0x65, 0x73, 0x3b, 0x6d, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mes_message_proto_rawDescOnce sync.Once
	file_mes_message_proto_rawDescData = file_mes_message_proto_rawDesc
)

func file_mes_message_proto_rawDescGZIP() []byte {
	file_mes_message_proto_rawDescOnce.Do(func() {
		file_mes_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_mes_message_proto_rawDescData)
	})
	return file_mes_message_proto_rawDescData
}

var file_mes_message_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_mes_message_proto_goTypes = []interface{}{
	(*Req)(nil),      // 0: mes.Req
	(*Res)(nil),      // 1: mes.Res
	(*Point)(nil),    // 2: mes.Point
	(*Range)(nil),    // 3: mes.Range
	(*Between)(nil),  // 4: mes.Between
	(*name.Res)(nil), // 5: name.Res
}
var file_mes_message_proto_depIdxs = []int32{
	5, // 0: mes.Req.NN:type_name -> name.Res
	0, // 1: mes.Res.img:type_name -> mes.Req
	0, // 2: mes.Waiter.Echo:input_type -> mes.Req
	0, // 3: mes.Waiter.HelloTest:input_type -> mes.Req
	2, // 4: mes.Waiter.HelloPoint:input_type -> mes.Point
	1, // 5: mes.Waiter.HelloRange:input_type -> mes.Res
	4, // 6: mes.Waiter.HelloBetween:input_type -> mes.Between
	1, // 7: mes.Waiter.Echo:output_type -> mes.Res
	1, // 8: mes.Waiter.HelloTest:output_type -> mes.Res
	1, // 9: mes.Waiter.HelloPoint:output_type -> mes.Res
	3, // 10: mes.Waiter.HelloRange:output_type -> mes.Range
	4, // 11: mes.Waiter.HelloBetween:output_type -> mes.Between
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_mes_message_proto_init() }
func file_mes_message_proto_init() {
	if File_mes_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mes_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mes_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mes_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mes_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mes_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Between); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mes_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mes_message_proto_goTypes,
		DependencyIndexes: file_mes_message_proto_depIdxs,
		MessageInfos:      file_mes_message_proto_msgTypes,
	}.Build()
	File_mes_message_proto = out.File
	file_mes_message_proto_rawDesc = nil
	file_mes_message_proto_goTypes = nil
	file_mes_message_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WaiterClient is the client API for Waiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WaiterClient interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	Echo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	HelloTest(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	HelloPoint(ctx context.Context, opts ...grpc.CallOption) (Waiter_HelloPointClient, error)
	HelloRange(ctx context.Context, in *Res, opts ...grpc.CallOption) (Waiter_HelloRangeClient, error)
	HelloBetween(ctx context.Context, opts ...grpc.CallOption) (Waiter_HelloBetweenClient, error)
}

type waiterClient struct {
	cc grpc.ClientConnInterface
}

func NewWaiterClient(cc grpc.ClientConnInterface) WaiterClient {
	return &waiterClient{cc}
}

func (c *waiterClient) Echo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/mes.Waiter/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waiterClient) HelloTest(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/mes.Waiter/HelloTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waiterClient) HelloPoint(ctx context.Context, opts ...grpc.CallOption) (Waiter_HelloPointClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waiter_serviceDesc.Streams[0], "/mes.Waiter/HelloPoint", opts...)
	if err != nil {
		return nil, err
	}
	x := &waiterHelloPointClient{stream}
	return x, nil
}

type Waiter_HelloPointClient interface {
	Send(*Point) error
	CloseAndRecv() (*Res, error)
	grpc.ClientStream
}

type waiterHelloPointClient struct {
	grpc.ClientStream
}

func (x *waiterHelloPointClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waiterHelloPointClient) CloseAndRecv() (*Res, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waiterClient) HelloRange(ctx context.Context, in *Res, opts ...grpc.CallOption) (Waiter_HelloRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waiter_serviceDesc.Streams[1], "/mes.Waiter/HelloRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &waiterHelloRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Waiter_HelloRangeClient interface {
	Recv() (*Range, error)
	grpc.ClientStream
}

type waiterHelloRangeClient struct {
	grpc.ClientStream
}

func (x *waiterHelloRangeClient) Recv() (*Range, error) {
	m := new(Range)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *waiterClient) HelloBetween(ctx context.Context, opts ...grpc.CallOption) (Waiter_HelloBetweenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Waiter_serviceDesc.Streams[2], "/mes.Waiter/HelloBetween", opts...)
	if err != nil {
		return nil, err
	}
	x := &waiterHelloBetweenClient{stream}
	return x, nil
}

type Waiter_HelloBetweenClient interface {
	Send(*Between) error
	Recv() (*Between, error)
	grpc.ClientStream
}

type waiterHelloBetweenClient struct {
	grpc.ClientStream
}

func (x *waiterHelloBetweenClient) Send(m *Between) error {
	return x.ClientStream.SendMsg(m)
}

func (x *waiterHelloBetweenClient) Recv() (*Between, error) {
	m := new(Between)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WaiterServer is the server API for Waiter service.
type WaiterServer interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	Echo(context.Context, *Req) (*Res, error)
	HelloTest(context.Context, *Req) (*Res, error)
	HelloPoint(Waiter_HelloPointServer) error
	HelloRange(*Res, Waiter_HelloRangeServer) error
	HelloBetween(Waiter_HelloBetweenServer) error
}

// UnimplementedWaiterServer can be embedded to have forward compatible implementations.
type UnimplementedWaiterServer struct {
}

func (*UnimplementedWaiterServer) Echo(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedWaiterServer) HelloTest(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloTest not implemented")
}
func (*UnimplementedWaiterServer) HelloPoint(Waiter_HelloPointServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloPoint not implemented")
}
func (*UnimplementedWaiterServer) HelloRange(*Res, Waiter_HelloRangeServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloRange not implemented")
}
func (*UnimplementedWaiterServer) HelloBetween(Waiter_HelloBetweenServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloBetween not implemented")
}

func RegisterWaiterServer(s *grpc.Server, srv WaiterServer) {
	s.RegisterService(&_Waiter_serviceDesc, srv)
}

func _Waiter_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaiterServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mes.Waiter/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaiterServer).Echo(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waiter_HelloTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaiterServer).HelloTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mes.Waiter/HelloTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaiterServer).HelloTest(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waiter_HelloPoint_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaiterServer).HelloPoint(&waiterHelloPointServer{stream})
}

type Waiter_HelloPointServer interface {
	SendAndClose(*Res) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type waiterHelloPointServer struct {
	grpc.ServerStream
}

func (x *waiterHelloPointServer) SendAndClose(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waiterHelloPointServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Waiter_HelloRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Res)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WaiterServer).HelloRange(m, &waiterHelloRangeServer{stream})
}

type Waiter_HelloRangeServer interface {
	Send(*Range) error
	grpc.ServerStream
}

type waiterHelloRangeServer struct {
	grpc.ServerStream
}

func (x *waiterHelloRangeServer) Send(m *Range) error {
	return x.ServerStream.SendMsg(m)
}

func _Waiter_HelloBetween_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WaiterServer).HelloBetween(&waiterHelloBetweenServer{stream})
}

type Waiter_HelloBetweenServer interface {
	Send(*Between) error
	Recv() (*Between, error)
	grpc.ServerStream
}

type waiterHelloBetweenServer struct {
	grpc.ServerStream
}

func (x *waiterHelloBetweenServer) Send(m *Between) error {
	return x.ServerStream.SendMsg(m)
}

func (x *waiterHelloBetweenServer) Recv() (*Between, error) {
	m := new(Between)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Waiter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mes.Waiter",
	HandlerType: (*WaiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Waiter_Echo_Handler,
		},
		{
			MethodName: "HelloTest",
			Handler:    _Waiter_HelloTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloPoint",
			Handler:       _Waiter_HelloPoint_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloRange",
			Handler:       _Waiter_HelloRange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HelloBetween",
			Handler:       _Waiter_HelloBetween_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mes/message.proto",
}
